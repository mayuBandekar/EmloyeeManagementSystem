@*
    For more information on enabling MVC for empty projects, visit https://go.microsoft.com/fwlink/?LinkID=397860
*@
@{
    ViewData["Title"] = "Timesheet";
}

<div class="text-center">
        <h1 class="display-4">Timesheet</h1>
   
        <div class="col-md-12 col-lg-12 d-flex flex-column justify-content-md-start ">
        <div class="row">
            <div class="col-md-6 col-lg-6">
                <div class="d-flex ">
                    <label>Select date</label> <span className="required" style="color: red">*</span>
                </div>
                <input type="date" class="form-control" id="selectedDate" />
            </div>
            <div class="col-md-6 col-lg-6">
                <div class="row">
                    <div class="col-md-6">
                        <label>Daily Hrs</label>
                        <input type="number" class="form-control" id="dailyHrs" />
                    </div>
                    <div class="col-md-6">
                        <label>Monthly Hrs</label>
                        <input type="number" class="form-control" id="monthlyHrs" />
                    </div>
                </div>
            </div>
            </div>
        </div>
        <div id="ifNull" class="mt-4">
          <label></label>
      </div>
   
    <div id="dataContainer" class="mt-4" style="display: none;">
       
        <div class="col-md-12 d-flex my-3">
                <div class="col-md-10">
                    <table class="table" id="tasksTable">
                        <thead>
                            <tr>
                                <th scope="col">TaskName</th>
                                <th scope="col">Hours</th>
                            <th scope="col">Actions</th>

                            </tr>

                        </thead>
                        <tbody>
                        </tbody>
                    </table>
                </div>
                <div class="col-md-2">
                    <button class="btn btn-primary" id="addTasksBtn">Add New Task</button>
                </div>
            </div>
        <div class="col-md-12 d-flex mt-3">
                <div class="col-md-10">
                    <table class="table" id="breaksTable">
                        <thead>
                            <tr>
                                <th scope="col">BreakStart</th>
                                <th scope="col">BreakEnd</th>
                                <th scope="col">Reason</th>
                            <th scope="col">Actions</th>

                            </tr>

                        </thead>
                        <tbody>
                        </tbody>
                    </table>
                </div>
                <div class="col-md-2">
                    <button class="btn btn-primary" id="addBreaksBtn">Add New Break</button>
                </div>
             </div>
        </div>
        <div class="modal fade" id="addTasksModal" tabindex="-1" role="dialog" aria-labelledby="addTasksModalLabel" aria-hidden="true">
            <div class="modal-dialog" role="document">
                <div class="modal-content">
                    <div class="modal-header">
                    <h5 class="modal-title fw-bold" id="addTasksModalLabel">Add New Tasks</h5>
                    </div>
                    <div class="modal-body">
                        <form id="addTasksForm">
                        <div class="form-group row col-lg-12">
                            <div class="d-flex py-2">
                                <label for="taskName" class="col-sm-3 text-left">Task Name</label><span className="required my-3" style="color: red">*</span>
                            </div>
                            <div class="col-lg-12">
                                <input type="text" name="taskName" class="form-control" id="taskName" placeholder="Enter task name" onclick=" handleSelect()" required>
                                </div>
                            </div>
                        <div class="form-group row col-lg-12">
                            <div class="d-flex ">
                                <label for="hours" class="col-sm-3 text-left mt-3">Hours</label><span className="required my-3" style="color: red">*</span>
                            </div>
                            <div class="col-lg-12">
                                <input type="number" name="hours" class="form-control" id="hours" placeholder="Enter hours" onclick=" handleSelect()" required>
                                </div>
                            </div>
                        <div id="AddTaskError"></div>
                        </form>
                   
                    </div>
                    
                    <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" id="closeTasksBtn" data-dismiss="modal" onclick=" handleSelect()">Close</button>
                        <button type="button" class="btn btn-primary" id="addTasks">Add Tasks</button>
                    </div>
                </div>
            </div>
        </div>
        <div class="modal fade" id="addBreaksModal" tabindex="-1" role="dialog" aria-labelledby="addBreaksModalLabel" aria-hidden="true">
            <div class="modal-dialog" role="document">
                <div class="modal-content">
                    <div class="modal-header">
                        <h5 class="modal-title fw-bold" id="addTasksModalLabel">Add New Tasks</h5>
                    </div>
                    <div class="modal-body">
                        <form id="addTasksForm" class="d-flex flex-column">
                        <div class="form-group row col-lg-12">
                            <div class="d-flex ">
                                <label for="BreakStart" class="col-sm-3 text-left mt-3">Break time</label><span className="required my-3" style="color: red">*</span>
                            </div>
                            <div class="col-lg-12">
                                <input type="time" name="BreakStart" class="form-control p-2 mx-lg-2" id="BreakStart" placeholder="Enter break time" onclick=" handleSelect()" required>
                            </div>
                        </div>
                        <div class="form-group row col-lg-12">
                            <div class="d-flex ">
                                <label for="BreakEnd" class="col-sm-3 text-left mt-3">Break end</label><span className="required my-3" style="color: red">*</span>
                            </div>
                            <div class="col-lg-12">
                                <input type="time" name="BreakEnd" class="form-control p-2 mx-lg-3" id="BreakEnd" placeholder="Enter break end" onclick=" handleSelect()" required>
                            </div>
                            </div>
                        <div class="form-group row col-lg-12">
                            <div class="d-flex ">
                                <label for="Reason" class="col-sm-3 text-left mt-3">Reason</label><span className="required my-3" style="color: red">*</span>
                            </div>
                            <div class="col-lg-12">
                                <textarea type="text" name="Reason" rows="4" class="form-control p-2 mx-lg-3" id="Reason" placeholder="Enter reason" onclick=" handleSelect()" required></textarea>
                            </div>
                        </div>
                        </form>
                    <div id="AddBreakError"></div>
                    </div>
               
                    <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" id="closeBreaksBtn" data-dismiss="modal" onclick=" handleSelect()">Close</button>
                    <button type="button" class="btn btn-primary" id="addBreaks">Add Break</button>
                    </div>
                </div>
            </div>
        </div>

      
        <div class="modal fade" id="editTasksModal" tabindex="-1" role="dialog" aria-labelledby="editTasksModalLabel" aria-hidden="true">
            <div class="modal-dialog" role="document">
                <div class="modal-content">
                    <div class="modal-header">
                        <h5 class="modal-title fw-bold" id="editTasksModalLabel">Edit Tasks</h5>
                    </div>
                    <div class="modal-body">
                        <form id="addTasksForm">
                            <div class="form-group row col-lg-12">
                            <div class="d-flex ">
                                <label for="taskName" class="col-sm-3 text-left mt-3">Task Name</label><span className="required my-3" style="color: red">*</span>
                            </div>
                                <div class="col-lg-12">
                                <input type="text" name="taskName" class="form-control" id="taskEditName" placeholder="Enter task name" onclick=" handleSelect()" required>
                                </div>
                            </div>
                            <div class="form-group row col-lg-12">
                            <div class="d-flex ">
                                <label for="hours" class="col-sm-3 text-left mt-3">Hours</label><span className="required my-3" style="color: red">*</span>
                            </div>
                                <div class="col-lg-12">
                                <input type="number" name="hours" class="form-control" id="editHours" placeholder="Enter hours" onclick=" handleSelect()" required>
                                </div>
                            </div>
                        </form>
                        <div id="EditTaskError"></div>
                    </div>
               
                    <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" id="closeEditTasksBtn" data-dismiss="modal" onclick=" handleSelect()">Close</button>
                        <button type="button" class="btn btn-primary" id="editTasks">Update Tasks</button>
                    </div>
                </div>
            </div>
        </div>
        <div class="modal fade" id="editBreaksModal" tabindex="-1" role="dialog" aria-labelledby="editBreaksModalLabel" aria-hidden="true">
            <div class="modal-dialog" role="document">
                <div class="modal-content">
                    <div class="modal-header">
                        <h5 class="modal-title fw-bold" id="editTasksModalLabel">Edit Break</h5>
                    </div>
                    <div class="modal-body">
                        <form id="addTasksForm" class="d-flex flex-column">
                            <div class="form-group row col-lg-12">
                            <div class="d-flex ">
                                <label for="BreakStart" class="col-sm-3 text-left mt-3">Break time</label><span className="required my-3" style="color: red">*</span>
                            </div>
                                <div class="col-lg-12">
                                <input type="time" name="BreakStart" class="form-control p-2 mx-lg-2" id="editBreakStart" placeholder="Enter break time" onclick=" handleSelect()" required>
                                </div>
                            </div>
                            <div class="form-group row col-lg-12">
                            <div class="d-flex ">
                                <label for="BreakEnd" class="col-sm-3 text-left mt-3">Break end</label><span className="required my-3" style="color: red">*</span>
                            </div>
                                <div class="col-lg-12">
                                <input type="time" name="BreakEnd" class="form-control p-2 mx-lg-3" id="editBreakEnd" placeholder="Enter break end" onclick=" handleSelect()" required>
                                </div>
                            </div>
                            <div class="form-group row col-lg-12">
                            <div class="d-flex ">
                                <label for="Reason" class="col-sm-3 text-left mt-3">Reason</label><span className="required my-3" style="color: red">*</span>
                            </div>
                                <div class="col-lg-12">
                                <textarea type="text" name="Reason" rows="4" class="form-control p-2 mx-lg-3" id="editReason" placeholder="Enter reason" onclick=" handleSelect()" required></textarea>
                                </div>
                            </div>
                        </form>
                    <div id="EditBreakError"></div>
                    </div>
               
                    <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" id="closeEditBreaksBtn" data-dismiss="modal" onclick=" handleSelect()">Close</button>
                        <button type="button" class="btn btn-primary" id="editBreaks">Update Break</button>
                    </div>
                </div>
            </div>
        </div>
        <div class="modal fade" id="deleteTaskModal" tabindex="-1" role="dialog" aria-labelledby="deleteTaskModalLabel" aria-hidden="true">
            <div class="modal-dialog" role="document">
                <div class="modal-content">
                    <div class="modal-header">
                        <h5 class="modal-title fw-bold" id="deleteTaskModalLabel">Delete Task</h5>
                    </div>
                    <div class="modal-body">
                        <p>Are you sure you want to delete this task?</p>
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-secondary" id="cancelDeleteTask" data-dismiss="modal">Cancel</button>
                        <button type="button" class="btn btn-danger" id="confirmDeleteTask">Delete</button>
                    </div>
                </div>
            </div>
        </div>
        <div class="modal fade" id="deleteBreakModal" tabindex="-1" role="dialog" aria-labelledby="deleteBreakModalLabel" aria-hidden="true">
            <div class="modal-dialog" role="document">
                <div class="modal-content">
                    <div class="modal-header">
                        <h5 class="modal-title fw-bold" id="deleteBreakModalLabel">Delete Break</h5>
                    </div>
                    <div class="modal-body">
                        <p>Are you sure you want to delete this Break?</p>
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-secondary" id="cancelDeleteBreak" data-dismiss="modal">Cancel</button>
                        <button type="button" class="btn btn-danger" id="confirmDeleteBreak">Delete</button>
                    </div>
                </div>
            </div>
        </div>
   
</div>

@section scripts {
    <script>
        var selectedDateG;
        document.getElementById("selectedDate").addEventListener("change", function () {
            var selectedDate = this.value;
            selectedDateG = this.value;
            fetchData(selectedDate);
            $(dataContainer).hide();

            clearTable('tasksTable');
            clearTable('breaksTable');

            var labelElement = document.getElementById("ifNull").querySelector("label");
            labelElement.textContent = '';
           
        });

        function handleSelect() {
            removeError();
            removeErrorDiv();
        }

        function clearTable(tableId) {
            var tableBody = document.getElementById(tableId).getElementsByTagName('tbody')[0];
            tableBody.innerHTML = '';
        }

        var TimesheetIDG;

        function fetchData(selectedDate) {
            var url = "/Timesheet/FetchData?selectedDate=" + selectedDate; 
            fetch(url)
                .then(response => {
                    if (!response.ok) {
                        throw new Error('Network response was not ok');
                    } 
                    return response.json()
                })
                .then(data => {
                    $(dataContainer).show();
                    displayData(data, selectedDate);
                    TimesheetIDG = data?.TimesheetData?.$values[0].Id;
                })
                .catch(error => {
                    console.error('Error fetching data:', error);
                });
        }

        function displayData(data, selectedDate) {
            var dataContainer = document.getElementById("dataContainer");

            var dailyHrs = data?.DailyWorkingHrs;
            var monthlyHrs = data?.MonthlyWorkingHrs;
            if (dailyHrs) {
                var DailyWorkingHrsEle = document.getElementById("dailyHrs");
                if (DailyWorkingHrsEle) {
                    DailyWorkingHrsEle.value = dailyHrs;
                }
            }

            if (monthlyHrs) {
                var DailyWorkingHrsEle = document.getElementById("monthlyHrs");
                if (DailyWorkingHrsEle) {
                    DailyWorkingHrsEle.value = monthlyHrs;
                }
            }

            if (data?.TimesheetData?.$values[0]?.Tasks?.$values?.length === 0 && data?.TimesheetData?.$values[0]?.Breaks?.$values?.length === 0) {
                displayError('No data available for the selected date.');
                return;
            }

            if (data?.TimesheetData?.$values[0]?.Tasks?.$values?.length === 0 && data?.TimesheetData?.$values[0]?.Breaks?.$values?.length === 0) {
                var data = `Add tasks and Breaks for ${selectedDate}`;
                var labelElement = document.getElementById("ifNull").querySelector("label");
                labelElement.textContent = data;
            }

            if (data?.TimesheetData?.$values[0]?.Tasks?.$values?.length === 0) {
                displayError('No tasks available for the selected date.');
            } else {
                populateTasksTable(data?.TimesheetData?.$values[0]?.Tasks.$values);
                removeError();
            }

            if (data?.TimesheetData?.$values[0]?.Breaks?.$values?.length === 0) {
                displayError('No breaks available for the selected date.');
            } else {
                populateBreaksTable(data?.TimesheetData?.$values[0]?.Breaks.$values);
                removeError();
            }

            // data.forEach(item => {
            //     var listItem = document.createElement("div");
            //     listItem.textContent = JSON.stringify(item); 
            //     dataContainer.appendChild(listItem);
            // });
        }


        function populateTasksTable(tasks) {
            console.log(tasks)
            var tasksTableBody = document.getElementById('tasksTable').getElementsByTagName('tbody')[0];
            tasksTableBody.innerHTML = '';
            tasks.forEach(function (task) {
                var row = tasksTableBody.insertRow();
                var cell1 = row.insertCell(0);
                var cell2 = row.insertCell(1);
                var cell3 = row.insertCell(2);

                cell1.textContent = task.TaskName;
                cell2.textContent = task.Hours;

                var editButton = document.createElement("button");
                editButton.textContent = "Edit";
                editButton.classList.add("btn", "btn-primary", "mr-2");
                editButton.onclick = function () {
                    handleEditTask(task);
                };
                cell3.appendChild(editButton);

                var deleteButton = document.createElement("button");
                deleteButton.textContent = "Delete";
                deleteButton.classList.add("btn", "btn-danger","mx-2");
                deleteButton.onclick = function () {
                    $('#deleteTaskModal').modal('show');
                    $('#confirmDeleteTask').off('click').on('click', function () {
                        handleDeleteTask(task);
                        $('#deleteTaskModal').modal('hide');
                    });
                };
                cell3.appendChild(deleteButton);
            });
        }

        function populateBreaksTable(breaks) {
            console.log(breaks)
            var breaksTableBody = document.getElementById('breaksTable').getElementsByTagName('tbody')[0];
            breaksTableBody.innerHTML = '';
            breaks.forEach(function (breakItem) {
                var row = breaksTableBody.insertRow();
                var cell1 = row.insertCell(0);
                var cell2 = row.insertCell(1);
                var cell3 = row.insertCell(2);
                var cell4 = row.insertCell(3);

                cell1.textContent = breakItem.BreakStart;
                cell2.textContent = breakItem.BreakEnd;
                cell3.textContent = breakItem.Reason;

                var editButton = document.createElement("button");
                editButton.textContent = "Edit";
                editButton.classList.add("btn", "btn-primary", "mr-2");
                editButton.onclick = function () {
                    handleEditBreak(breakItem);
                };
                cell4.appendChild(editButton);

                var deleteButton = document.createElement("button");
                deleteButton.textContent = "Delete";
                deleteButton.classList.add("btn", "btn-danger","mx-2");
                deleteButton.onclick = function () {
                    $('#deleteTaskModal').modal('show');
                    $('#confirmDeleteTask').off('click').on('click', function () {
                        handleDeleteBreak(breakItem);
                        $('#deleteTaskModal').modal('hide');
                    });
                };
                cell4.appendChild(deleteButton);
            });
        }

        $(document).ready(function () {
            $('#addTasksBtn').click(function () {
                $('#addTasksModal').modal('show');
            });

            $('#closeTasksBtn').click(function () {
                $('#addTasksModal').modal('hide');
            });

            $('#addBreaksBtn').click(function () {
                $('#addBreaksModal').modal('show');
            });

            $('#closeBreaksBtn').click(function () {
                $('#addBreaksModal').modal('hide');
            });

            $('#editTasksModal').click(function () {
                $('#editTasksModal').modal('show');
            });

            $('#closeEditTasksBtn').click(function () {
                $('#editTasksModal').modal('hide');
            });

            $('#editBreaksModal').click(function () {
                $('#editBreaksModal').modal('show');
            });

            $('#closeEditBreaksBtn').click(function () {
                $('#editBreaksModal').modal('hide');
            });


            countTotalHrs();
        });

        function showError(message,id) {
            var errorElement = document.getElementById('errorMessage');
            if (!errorElement) {
                errorElement.id = 'errorMessage';
                errorElement.classList.add('alert', 'alert-danger');
                errorElement.textContent = message;
                document.getElementById(id).appendChild(errorElement);
            } else {
                errorElement.textContent = message;
            }
        }

        function removeErrorDiv(id) {
            var errorElement = document.getElementById(id);
            if (errorElement) {
                errorElement.parentNode.removeChild(errorElement);
            }
        }

        function displayError(message) {

            var errorContainer = document.createElement("div");
            errorContainer.textContent = message;
            errorContainer.classList.add("text-danger");
            errorContainer.id = "errorContainer";
            document.getElementById("dataContainer").appendChild(errorContainer);
        }

        function removeError() {
            var errorContainer = document.getElementById("errorContainer");
            if (errorContainer) {
                errorContainer.remove();
            }
        }

        function resetSelect() {
            var selectElementDay = document.getElementById("taskName");
            selectElementDay.value = "";

            var selectElementDay = document.getElementById("hours");
            selectElementDay.value = "";

            var selectElementDay = document.getElementById("BreakStart");
            selectElementDay.value = "";

            var selectElementDay = document.getElementById("BreakEnd");
            selectElementDay.value = "";

            var selectElementDay = document.getElementById("Reason");
            selectElementDay.value = "";

            var selectElementDay = document.getElementById("taskEditName");
            selectElementDay.value = "";

            var selectElementDay = document.getElementById("editHours");
            selectElementDay.value = "";

            var selectElementDay = document.getElementById("editBreakStart");
            selectElementDay.value = "";

            var selectElementDay = document.getElementById("editBreakEnd");
            selectElementDay.value = "";

            var selectElementDay = document.getElementById("editReason");
            selectElementDay.value = "";

            removeError()
        }

        document.getElementById("addTasks").addEventListener("click", function () {
            addTasks();
        });

        function addTasks() {
            var taskName = document.getElementById("taskName").value;
            var hours = document.getElementById("hours").value;

            if (taskName == "" || hours == "") {
                removeError();
                showError("Please select a TaskName and Hours.", "EditTaskError");
            } else {
                var payload = {
                    TaskName: taskName,
                    Hours: hours,
                    TimesheetID: TimesheetIDG
                };

                fetch('/Timesheet/AddTasks', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify(payload)
                })
                    .then(response => {
                        if (!response.ok) {
                            throw new Error('Network response was not ok');
                        }
                        return response.json();
                    })
                    .then(data => {
                        var selectedDate = document.getElementById("selectedDate").value;
                        fetchData(selectedDate);
                        resetSelect();
                        $('#addTasksModal').modal('hide');
                    })
                    .catch(error => {
                        console.error('Error adding task:', error);
                    });
            }
        }

        document.getElementById("addBreaks").addEventListener("click", function () {
            addBreaks();
        });

        function addBreaks() {
            var breakStart = document.getElementById("BreakStart").value;
            var breakEnd = document.getElementById("BreakEnd").value;
            var reason = document.getElementById("Reason").value;

            if (breakStart == "" || breakEnd == "" || reason == "") {
                removeError();
                showError("Please select a Break start, Break end and reason.");
            } else {

                var payload = {
                    BreakStart: breakStart,
                    BreakEnd: breakEnd,
                    Reason: reason,
                    TimesheetID: TimesheetIDG
                };

                fetch('/Timesheet/AddBreaks', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify(payload)
                })
                    .then(response => {
                        console.log(payload)

                        if (!response.ok) {
                            throw new Error('Network response was not ok');
                        }
                        return response.json();
                    })
                    .then(data => {
                        var selectedDate = document.getElementById("selectedDate").value;
                        fetchData(selectedDate);
                        resetSelect();
                        $('#addBreaksModal').modal('hide');
                    })
                    .catch(error => {
                        console.error('Error adding task:', error);
                    });
            }
        }

        var TaskItemId;

        function handleEditTask(task) {
            TaskItemId = task.Id;
            document.getElementById("taskEditName").value = task.TaskName;
            document.getElementById("editHours").value = task.Hours;
            $('#editTasksModal').modal('show');
        }

        var breakItemId;

        function handleEditBreak(breakItem) {
            breakItemId = breakItem.Id;
            document.getElementById("editBreakStart").value = breakItem.BreakStart;
            document.getElementById("editBreakEnd").value = breakItem.BreakEnd;
            document.getElementById("editReason").value = breakItem.Reason;
            $('#editBreaksModal').modal('show');
        }

        $(document).ready(function () {
            document.getElementById("editTasks").addEventListener("click", function () {

                var taskName = document.getElementById("taskEditName").value;
                var hours = document.getElementById("editHours").value;

                if (taskName == "" || hours == "") {
                    showError("Please select a Task and hours.");
                } else {

                    var updatedTask = {
                        Id: TaskItemId,
                        TaskName: document.getElementById("taskEditName").value,
                        Hours: document.getElementById("editHours").value,
                        TimesheetID: TimesheetIDG
                    };

                    fetch('/Timesheet/EditTasks?id=' + TaskItemId, {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json'
                        },
                        body: JSON.stringify(updatedTask)
                    })
                        .then(response => {
                            if (!response.ok) {
                                throw new Error('Network response was not ok');
                            }
                            return response.json();
                        })
                        .then(data => {
                            console.log('Task added successfully:', data);
                            $('#editTasksModal').modal('hide');
                            var selectedDate = document.getElementById("selectedDate").value;
                            fetchData(selectedDate);
                            resetSelect();
                        })
                        .catch(error => {
                            console.error('Error adding task:', error);
                        });
                }
            });

            document.getElementById("closeEditTasksBtn").addEventListener("click", function () {
                $('#editTasksModal').modal('hide');
            });

            document.getElementById("editBreaks").addEventListener("click", function () {

                var breakStart = document.getElementById("editBreakStart").value;
                var breakEnd = document.getElementById("editBreakEnd").value;
                var reason = document.getElementById("editReason").value;

                if (breakStart == "" || breakEnd == "" || reason == "") {
                    removeError();
                    showError("Please select a Break start, Break end and reason.");
                } else {
                    var updatedBreak = {
                        Id: breakItemId,
                        BreakStart: document.getElementById("editBreakStart").value,
                        BreakEnd: document.getElementById("editBreakEnd").value,
                        Reason: document.getElementById("editReason").value,
                        TimesheetID: TimesheetIDG
                    };

                    fetch('/Timesheet/EditBreaks?id=' + breakItemId, {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json'
                        },
                        body: JSON.stringify(updatedBreak)
                    })
                        .then(response => {
                            if (!response.ok) {
                                throw new Error('Network response was not ok');
                            }
                            return response.json();
                        })
                        .then(data => {
                            console.log('Task added successfully:', data);
                            var selectedDate = document.getElementById("selectedDate").value;
                            fetchData(selectedDate);
                            $('#editBreaksModal').modal('hide');
                            resetSelect();
                        })
                        .catch(error => {
                            console.error('Error adding task:', error);
                        });
                }
            });

            document.getElementById("closeEditBreaksBtn").addEventListener("click", function () {
                $('#editBreaksModal').modal('hide');
            });

            document.getElementById("cancelDeleteTask").addEventListener("click", function () {
                $('#deleteTaskModal').modal('hide');
            });

            document.getElementById("cancelDeleteBreak").addEventListener("click", function () {
                $('#deleteBreakModal').modal('hide');
            });
        });

        function handleDeleteTask(task) {
            
            var taskId = task.Id;
            fetch('/Timesheet/DeleteTask?id=' + taskId, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                }
            })
                .then(response => {
                    if (!response.ok) {
                        throw new Error('Network response was not ok');
                    }
                    return response.json();
                })
                .then(data => {
                    console.log('Task deleted successfully:', data);
                    var selectedDate = document.getElementById("selectedDate").value;
                    fetchData(selectedDate);
                })
                .catch(error => {
                    console.error('Error deleting task:', error);
                });
        }

        function handleDeleteBreak(breakItem) {
            var breakId = breakItem.Id;

            fetch('/Timesheet/DeleteBreak?id=' + breakId, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                }
            })
                .then(response => {
                    if (!response.ok) {
                        throw new Error('Network response was not ok');
                    }
                    return response.json();
                })
                .then(data => {
                    console.log('break deleted successfully:', data);
                    var selectedDate = document.getElementById("selectedDate").value;
                    fetchData(selectedDate);
                })
                .catch(error => {
                    console.error('Error deleting task:', error);
                });
        }
        
    </script>
}